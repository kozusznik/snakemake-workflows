// Load Fiji dependencies
import ij.IJ; 		// calls imagej
import ij.Prefs; 	// calls imagej settings
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;
import java.lang.Object;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

//Prefs.setThreads(1); 	// defines the number of threads allowed
//print("Threads: "+Prefs.getThreads()); // prints thread setting in output

System.out.println("Start loading parameters");

// select xml
System.out.println( "-------------------------------------------------------" );
System.out.println( "Load xml file: " );

xml_path = System.getProperty( "image_file_directory" );
xml_filename = System.getProperty( "xml_filename" );

System.out.println( "selected_xml = " + xml_path + xml_filename + ".xml");

// Load general Parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "General parameters: " );

reg_process_angle = System.getProperty( "reg_process_angle" );
reg_process_illumination = System.getProperty( "reg_process_illumination" );
reg_process_tile = System.getProperty( "reg_process_tile" );
reg_process_timepoint = System.getProperty( "reg_process_timepoint" );

unique_id = System.getProperty( "parallel_timepoints" );
String processing_timepoint_string = "";
if (unique_id != null)
{
    processing_timepoint_string = "processing_timepoint=[Timepoint " + unique_id + "] "
}
else
{
    System.out.println( "Could not retrieve parallel_timepoints property." );
}

System.out.println( "process_angle = " + reg_process_angle );
System.out.println( "process_illumination = " + reg_process_illumination );
System.out.println( "process_tile = " + reg_process_tile );
System.out.println( "process_timepoints = " + reg_process_timepoint );
System.out.println( processing_timepoint_string );

// Interest point detection parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "Detection of Interest Points: " );

label_interest_points= System.getProperty( "label_interest_points" );
type_of_registration = System.getProperty( "type_of_registration" );
type_of_detection = System.getProperty( "type_of_detection" );
subpixel_localization = System.getProperty( "subpixel_localization" );
imglib_container = System.getProperty( "imglib_container" );

System.out.println( "label_interest_points = " + label_interest_points );
System.out.println( "type_of_registration = " + type_of_registration );
System.out.println( "type_of_detection = " + type_of_detection );
System.out.println( "subpixel_localization = " + subpixel_localization );
System.out.println( "imglib_container = " + imglib_container );

// Registration parameters
System.out.println( "-------------------------------------------------------" );
System.out.println( "Parameters for Registration: " );

registration_algorithm = System.getProperty( "registration_algorithm" );

fix_tiles = System.getProperty( "fix_tiles" );
map_back_tiles = System.getProperty( "map_back_tiles" );
transformation_model = System.getProperty( "transformation_model" );
model_to_regularize_with = System.getProperty( "model_to_regularize_with" );
float lambda = Float.parseFloat( System.getProperty( "lambda" ) );
int allowed_error_for_ransac = Integer.parseInt( System.getProperty( "allowed_error_for_ransac" ) );
significance = System.getProperty( "significance" );

System.out.println( "registration_algorithm = " + registration_algorithm );
System.out.println( "fix_tiles = " + fix_tiles );
System.out.println( "map_back_tiles = " + map_back_tiles );
System.out.println( "transformation = " + transformation_model);
System.out.println( "model_to_regularize_with = " + model_to_regularize_with );
System.out.println( "lambda = " + lambda );
System.out.println( "allowed_error_for_ransac = " + allowed_error_for_ransac );
System.out.println( "significance = " + significance );


// detection_min_max = System.getProperty( "detection_min_max" );
// System.out.println( "detection_min_max = " + detection_min_max );

System.out.println( "-------------------------------------------------------" );
System.out.println( "Downsampling: " );

downsample_detection = System.getProperty( "downsample_detection" );
downsample_xy = System.getProperty( "downsample_xy" );
downsample_z = System.getProperty( "downsample_z" );

System.out.println( "downsample_detection = " + downsample_detection );
System.out.println( "downsample_xy = " + downsample_xy );
System.out.println( "downsample_z = " + downsample_z );
downsample_images = null;
downsample_string = null;
// downsample switch
if (downsample_detection.equalsIgnoreCase("Yes") )
{
	System.out.println( "Downsampling is turned on" );
	downsample_images = "downsample_images ";
	downsample_string = "downsample_xy=[" + downsample_xy + "] " +
				"downsample_z=" + downsample_z + " ";
}

else if (downsample_detection.equalsIgnoreCase("No") )
{
	System.out.println( "Downsampling is turned off" );
	downsample_images = "";
	downsample_string = "";
}

else
{
	System.out.println("Warning: Downsample setting bad");
}

System.out.println( "-------------------------------------------------------" );
System.out.println( "Channel setting for Detection: " );

// Channel setting for Difference-of-Mean detection
// parses channels and takes from there the number of channels
// takes from reg_process_channel if it is Single Channel, Dual Channel or Dual Channel
// were one Channel contains the beads
// from this it decides which string to assemble
reg_process_channel = System.getProperty( "reg_process_channel" );
System.out.println( "process_channel = " + reg_process_channel );
reg_processing_channel = System.getProperty( "reg_processing_channel" );
System.out.println( "processing_channel = channel " + reg_processing_channel );
channels = System.getProperty( "channels" );
System.out.println( "Channels = " + channels );

// Difference of Mean Settings
reg_radius_1 = System.getProperty( "reg_radius_1" );
System.out.println( "reg_radius_1 = " + reg_radius_1 );
reg_radius_2 = System.getProperty( "reg_radius_2" );
System.out.println( "reg_radius_2 = " + reg_radius_2 );
reg_threshold = System.getProperty( "reg_threshold" );
System.out.println( "reg_threshold = " + reg_threshold);

// Difference of Gaussian Settings
sigma = System.getProperty( "sigma" );
threshold_gaussian = System.getProperty( "threshold_gaussian" );
compute_on = System.getProperty( "compute_on");
directory_cuda = System.getProperty( "directory_cuda" );
separableconvolution = System.getProperty( "separableconvolution" );

System.out.println( "sigma = " + sigma );
System.out.println( "threshold = " + threshold_gaussian );
System.out.println( "compute_on = " + compute_on );
System.out.println( "directory_cuda = " + directory_cuda );
System.out.println( "separableconvolution = " + separableconvolution );

// Sets delimiter
String delims = "[,]";

// parses channels
String[] channel_token = channels.split(delims);

// parses settings for Difference of Mean
String[] radius_1_token = reg_radius_1.split(delims);
String[] radius_2_token = reg_radius_2.split(delims);
String[] threshold_token = reg_threshold.split(delims);

// parses settings for Difference of Gaussian
String[] sigma_token = sigma .split(delims);
String[] dog_threshold_token = threshold_gaussian.split(delims);

// Defines variables for compute_string and sets it to an empty string
String compute_string = "";

// Defines variables for channel_string and sets it to an empty string
String channel_string = "";

// Defines variables for processing_channel_string and sets it to an empty string
String processing_channel_string = "";

// Defines variables for channel_string_multi and activates StringBuilder
StringBuilder channel_string_multi = new StringBuilder();

// If there are no channels set returns an error
if (channels.equalsIgnoreCase(""))
{
	System.out.println("Warning: There are no channels set");
}

// Returns an Error if there is one channel in channels but multiple settings in radius and or threshold
else if ( channel_token.length == 1 && (radius_1_token.length > 1 || radius_2_token.length > 1 || threshold_token.length > 1 ) )
{
	System.out.println( "Error: Only one channel detected but multiple channel settings for radius or threshold" );
}

// Assembles String for Singel Channel
else if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_token.length == 1 )
{
	System.out.println( "Channel Setting: Multiple channels" );
	processing_channel_string = "";
	channel_string_multi.append("");
// Switches between Difference-of-Mean and Difference-of-Gaussian Settings
	if (type_of_detection.equalsIgnoreCase( "Difference-of-Mean (Integral image based)" ) )
	{
		channel_string = "interest_point_specification=[Advanced ...] " +
				"radius_1=" + reg_radius_1 + " " +
				"radius_2=" + reg_radius_2 + " " +
				"threshold=" + reg_threshold + " " +
				"find_maxima";
	}

	else if (type_of_detection.equalsIgnoreCase( "Difference-of-Gaussian" ) )
	{
		channel_string = "interest_point_specification=[Advanced ...] " +
		"sigma=" + sigma + " " +
		"threshold=" + threshold_gaussian + " " +
		"find_maxima ";
	}

	else
	{
		System.out.println( "Error: type_of_detection selection is bad" );
	}
}

// Dual Channels both Channels contain beads
else if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_token.length > 1 )
{
	System.out.println( "Channel Setting: Multiple channels" );

	// Assembles String using StringBuilder for 2 Channels
	// Switches between Difference-of-Mean and Difference-of-Gaussian Settings
	if (type_of_detection.equalsIgnoreCase( "Difference-of-Mean (Integral image based)" ) )
	{
		for (int channel=0; channel < channel_token.length; channel++ )
		{
			String channel_part = "interest_point_specification_(channel_" + channel_token[channel] + ")=[Advanced ...] " +
						"radius_1_" + channel_token[channel] +  "=" + radius_1_token[channel] + " " +
						"radius_2_" + channel_token[channel] +  "=" + radius_2_token[channel] + " " +
						"threshold_" + channel_token[channel] +  "=" + threshold_token[channel] + " " +
						"find_maxima_" + channel_token[channel];
						channel_string_multi.append(channel_part);
						channel_string_multi.append(" ");
		}
	}

	else if (type_of_detection.equalsIgnoreCase( "Difference-of-Gaussian" ) )
	{
		/*
		for (int channel=0; channel < channel_token.length; channel++ )
		{

			String channel_part = "interest_point_specification_(channel_" + channel_token[channel] + ")=[Advanced ...] " +
						"sigma_" + channel_token[channel] +  "=" + sigma_token[channel] + " " +
						"threshold_" + channel_token[channel] +  "=" + dog_threshold_token[channel] + " " +
						"find_maxima_" + channel_token[channel] + " ";
						channel_string_multi.append(channel_part);
						channel_string_multi.append(" ");
		}
		*/
		String channel_part = "interest_point_specification=[Advanced ...] " +
                                      "sigma=" + sigma + " " +
                                      "threshold=" + dog_threshold + " " +
                                      "find_maxima";
		channel_string_multi.append(channel_part);
		channel_string_multi.append(" ");

	}

	else
	{
		System.out.println( "Error: type_of_detection selection is bad" );
	}

}

// Returns an Error if set to Dual Channel one Channel contains beads but there is only one channel in channels	
else if ( reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) && channel_token.length == 1 )
{
	System.out.println( "Error: reg_process_channel or channels set incorrectly" );
}

// Returns and Error if set to Dual Channel processing one channel contains the beads but there are multiple settings in radius and or threshold
else if ( reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) && (radius_1_token.length > 1 || radius_2_token.length > 1 || threshold_token.length > 1 ) )
{
	System.out.println( "Error: Set to process only one channel but multiple settings for radius or threshold" );
}

// Assembles String for Dual Channel but only one Channel contains beads
else if (reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) && channel_token.length > 1)
{

	System.out.println( "Channel Setting: Multiple channels one channel contains beads" );
	// Switches between Difference-of-Mean and Difference-of-Gaussian Settings
	if (type_of_detection.equalsIgnoreCase( "Difference-of-Mean (Integral image based)" ) )
	{
		channel_string_multi.append("");
		processing_channel_string = "processing_channel=[channel " +  reg_processing_channel + "] ";
		channel_string = "interest_point_specification=[Advanced ...] " +
				"radius_1=" + reg_radius_1 + " " +
				"radius_2=" + reg_radius_2 + " " +
				"threshold=" + reg_threshold + " " +
				"find_maxima";
	}

	else if (type_of_detection.equalsIgnoreCase( "Difference-of-Gaussian" ) )
	{
		channel_string_multi.append("");
		processing_channel_string = "processing_channel=[channel " +  reg_processing_channel + "] ";
		channel_string = "interest_point_specification=[Advanced ...] " +
				"sigma=" + sigma + " " +
				"threshold=" + threshold_gaussian + " " +
				"find_maxima ";
	}
}

// Returns and Error if no conditions above are met
else
{
	System.out.println( "Error: Incorrect Detection of Interest points settings" );
}

// Compute on settings for Difference-of-Gaussian
if (type_of_detection.equalsIgnoreCase( "Difference-of-Mean (Integral image based)" )  )
{
	System.out.println( "Bead detection set to Difference-of-Mean (Integral image based)" );
	compute_string = "";
}

else if (type_of_detection.equalsIgnoreCase( "Difference-of-Gaussian" ) && compute_on.equalsIgnoreCase( "CPU (Java)" )  )
{
	System.out.println( "Bead detection set to Difference-of-Gaussian processing on CPU" );
	compute_string = "compute_on=[" + compute_on + "]";
}

else if (type_of_detection.equalsIgnoreCase( "Difference-of-Gaussian" ) && ( compute_on.equalsIgnoreCase( "GPU accurate (Nvidia CUDA via JNA)" ) )  ) // need second setting 
{
	System.out.println( "Bead detection set to Difference-of-Gaussian processing on GPU" );
	compute_string = "compute_on=[" + compute_on + "] " +
			"directory_cuda=" + directory_cuda + " " +
			"select_native_library_for_cudaseparableconvolution=" +separableconvolution;
}

else
{
	System.out.println( "Settings for [Difference of Gaussian:compute on] is bad" );
}

System.out.println( "downsample_images = " + downsample_images );
System.out.println( "downsample = " + downsample_string );
System.out.println( "Processing Channel = " + processing_channel_string );
System.out.println( "Channel String: " + channel_string );
System.out.println( reg_process_channel );
System.out.println( "Multi channel String: " + channel_string_multi );
System.out.println( "Compute on=" + compute_string );

// Channel Setting Registration
System.out.println( "-------------------------------------------------------" );
System.out.println( "Channel Setting for Registration: " );
// parses channels and takes from there the number of channels
// takes from reg_process_channel if it is Single Channel, Dual Channel or Dual Channel
// were one Channel contains the beads
// from this it decides which string to assemble

reg_interest_points_channel = System.getProperty( "reg_interest_points_channel" );
System.out.println( "reg_interest_points_channel = " + reg_interest_points_channel );

// Splits up channels, reg_interest_points_channel
// String delims = "[,]";
// String[] channel_token = channels.split(delims);
// Splits up channels, reg_interest_points_channel
String[] interest_token = reg_interest_points_channel.split(delims);
String reg_single_channel_string ="";
StringBuilder reg_multi_channel_string = new StringBuilder();

// If there are no channels set returns an error
if (channels.equalsIgnoreCase(""))
{
	System.out.println("Warning: There are no channels set");
}

// Assembles string for Single Channel registration
else if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_token.length == 1 && interest_token.length == 1 )
{
	reg_multi_channel_string.append( "" );
//	reg_single_channel_string = "interest_points_channel_" + channels + "=" + reg_interest_points_channel + " ";
	reg_single_channel_string = "interest_points=" + reg_interest_points_channel + " ";
}

// Returns error if Multi Channels are selected but not enough settings in channels or 	reg_interest_points_channel
else if (reg_process_channel.equalsIgnoreCase( "All channels" ) &&  ( channel_token.length < 1 || interest_token.length < 1) )
{
	System.out.println( "Error: Multi Channel selected but only one setting in channels or reg_interest_points_channel" );
}

// Assembles string for Multi Channel registration
else if (reg_process_channel.equalsIgnoreCase( "All channels" ) && channel_token.length > 1 )
{
/*
	for (int channel=0; channel < channel_token.length; channel++ )
	{
		String channel_part = "interest_points_channel_" + channel_token[channel] + "=" + interest_token[channel] + " ";
		reg_multi_channel_string.append( channel_part );
		reg_multi_channel_string.append(" ");
	}
*/
	reg_multi_channel_string.append("interest_points=" + reg_interest_points_channel + " ");
}

// Returns error of Multi Channels one Channel contains the beads is selected but not enough settings in channels or reg_interest_points_channel
else if (reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) && ( channel_token.length < 1 || interest_token.length < 1 ))
{
	System.out.println( "Error: Multi Channel one Channel contains beads selected but only one setting in channls or reg_interest_points_channel" );
}

// Assembles string for Multi Channel Processing one Channel Contains the beads
else if (reg_process_channel.equalsIgnoreCase( "Single channel (Select from List)" ) && channel_token.length > 1 && interest_token.length > 1)
{
/*
	for (int channel=0; channel < channel_token.length; channel++ )
	{
		String channel_part = "interest_points_channel_" + channel_token[channel] + "=" + interest_token[channel] + " ";
		reg_multi_channel_string.append( channel_part );
		reg_multi_channel_string.append(" ");
	}
*/
	reg_multi_channel_string.append("interest_points=" + reg_interest_points_channel + " ");
}

		System.out.println( "reg_single_channel_string = " + reg_single_channel_string );
		System.out.println( "reg_multi_channel_string = " + reg_multi_channel_string );

// activate cluster processing
System.out.println( "=======================================================" );
try {
IJ.run("Toggle Cluster Processing", "display_cluster");
}
catch ( e ) {

    print( "[registration::activate_cluster_processing] caught exception: "+e );
    //important to fail the process if exception occurs
    runtime.exit(1);

}

System.out.println( "Activated Cluster Processing" );

// interest point detection
System.out.println( "=======================================================" );
System.out.println( "Starting Detection of Interest Points" );

System.out.println("(Detect Interest Points for Registration , select=" + xml_path + xml_filename + ".xml " +
	"unique_id=" + unique_id + " " +
	"process_angle=[" + reg_process_angle + "] " +
	"process_channel=[" + reg_process_channel + "] " +
	"process_illumination=[" + reg_process_illumination + "] " +
	"process_tile=[" + reg_process_tile + "] " +
	"process_timepoint=[" + reg_process_timepoint + "] " +
	processing_channel_string +
	"xml_output=[Save every XML with user-provided unique id]" + " " +
	processing_timepoint_string +
	"type_of_interest_point_detection=[" + type_of_detection + "] " +
	"label_interest_points=" + label_interest_points + " " +
	downsample_images +
	"subpixel_localization=[" + subpixel_localization + "] " +
	downsample_string +
	channel_string + "" +
	channel_string_multi + "" +
	compute_string + "" +
	");");

try {
IJ.run("Detect Interest Points for Registration",
	"select=" + xml_path + xml_filename + ".xml " +
	"unique_id=" + unique_id + " " +
	"process_angle=[" + reg_process_angle + "] " +
	"process_channel=[" + reg_process_channel + "] " +
	"process_illumination=[" + reg_process_illumination + "] " +
	"process_tile=[" + reg_process_tile + "] " +
	"process_timepoint=[" + reg_process_timepoint + "] " +
	processing_channel_string +
	"xml_output=[Save every XML with user-provided unique id]" + " " +
	processing_timepoint_string +
	"type_of_interest_point_detection=[" + type_of_detection + "] " +
	"label_interest_points=" + label_interest_points + " " +
        downsample_images +
	"subpixel_localization=[" + subpixel_localization + "] " +
	downsample_string +
	channel_string + "" +
	channel_string_multi + "" +
	compute_string + "" +
	"");
}
catch ( e ) { 

    print( "[registration::detection of interest_points] caught exception: "+e );
    //important to fail the process if exception occurs
    runtime.exit(1);
    
}

// registration based on interest point detection
System.out.println( "=======================================================" );
System.out.println( "Starting Registration" );

System.out.println("Register Dataset based on Interest Points , select=" + xml_path + xml_filename + ".job_" + unique_id + ".xml " +
        "process_angle=[" + reg_process_angle + "] " +
        "process_channel=[" + reg_process_channel + "] " +
        "process_illumination=[" + reg_process_illumination + "] " +
        "process_timepoint=[" + reg_process_timepoint + "] " +
	"xml_output=[Do not process on cluster] " + 
	    processing_timepoint_string +
        "registration_algorithm=[" + registration_algorithm + "] " +
        "type_of_registration=[" + type_of_registration + "] " +
        reg_single_channel_string +
        reg_multi_channel_string +   
        "fix_tiles=[" + fix_tiles + "] " +
        "map_back_tiles=[" + map_back_tiles + "] " +
        "transformation=" + transformation_model + " " +
        "regularize_model " +
        "model_to_regularize_with=" + model_to_regularize_with + " " +
        "lamba=" + lambda + " " +
        "allowed_error_for_ransac=" + allowed_error_for_ransac + " " +
        "significance=" + significance + "");

try {
IJ.run("Register Dataset based on Interest Points",
	"select=" + xml_path + xml_filename + ".job_" + unique_id + ".xml " +
        "process_angle=[" + reg_process_angle + "] " +
        "process_channel=[" + reg_process_channel + "] " +
        "process_illumination=[" + reg_process_illumination + "] " +
        "process_timepoint=[" + reg_process_timepoint + "] " +
	"xml_output=[Do not process on cluster] " + 
	    processing_timepoint_string +
        "registration_algorithm=[" + registration_algorithm + "] " +
        "type_of_registration=[" + type_of_registration + "] " +
        reg_single_channel_string +
        reg_multi_channel_string +   
        "fix_tiles=[" + fix_tiles + "] " +
        "map_back_tiles=[" + map_back_tiles + "] " +
        "transformation=" + transformation_model + " " +
        "regularize_model " +
        "model_to_regularize_with=" + model_to_regularize_with + " " +
        "lamba=" + lambda + " " +
        "allowed_error_for_ransac=" + allowed_error_for_ransac + " " +
        "significance=" + significance + "");
}
catch ( e ) {
    print( "[registration::registration of interest points] caught exception: "+e );
    //important to fail the process if exception occurs
    runtime.exit(1);
}
/* shutdown */
runtime.exit(0);
